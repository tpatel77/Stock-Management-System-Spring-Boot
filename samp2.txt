account_id         = "mTAwmqz1S4SUALu7bLm2jQ"
project_identifier = "specialty_sprx"
org_identifier     = "cvsdigital"


services_list = [
  {
    "service" : {
      "name" : "spl-domain-notessummary",
      "description" : "Harness service for spl-domain-notessummary.",
      "tags" : [
        "app-type: springboot",
        "ns-category: sprx"
      ]
    }
  },
  {
    "service" : {
      "name" : "spl-domain-referrals",
      "description" : "Harness service for spl-domain-referrals.",
      "tags" : [
        "app-type: springboot",
        "ns-category: sprx"
      ]
    }
  },
  {
    "service" : {
      "name" : "intent-manager-context-handler",
      "description" : "Harness service for intent-manager-context-handler.",
      "tags" : [
        "app-type: python",
        "ns-category: sprx"
      ]
    }
  },
  {
    "service" : {
      "name" : "digitalpharmacyrouter",
      "description" : "Harness service for graphql router spl",
      "tags" : [
        "app-type: docker",
        "ns-category: sprx"
      ]
    }
  },
  {
    "service" : {
      "name" : "digital-experience-api",
      "description" : "Harness service for digital-experience-api",
      "tags" : [
        "app-type: nodejs",
        "ns-category: sprx",
        "app-classification: i90"
      ]
    }
  },
  {
    "service" : {
      "name" : "enterprise-capability-promptassist",
      "description" : "Harness service for enterprise-capability-promptassist",
      "tags" : [
        "app-type: nodejs",
        "ns-category: sprx",
        "app-classification: i90"
      ]
    }
  }
]

environment_list = [
  {
    "environment" : {
      "name" : "sprx-dev1",
      "description" : "Harness environment dev1.",
      "type" : "PreProduction",
      "connector_name" : "specialty-sprx-gke-connector",
      "tags" : [
        "env-type: dev",
        "ns-category: sprx"
      ]
    }
  },
  {
    "environment" : {
      "name" : "sprx-sit1",
      "description" : "Harness environment sit1.",
      "type" : "PreProduction",
      "connector_name" : "gke-specialty-sprx-connector",
      "tags" : [
        "env-type: sit",
        "ns-category: sprx"
      ]
    }
  },
  {
    "environment" : {
      "name" : "sprx-pt",
      "description" : "Harness environment pt.",
      "type" : "PreProduction",
      "connector_name" : "pt-specialty-sprx-connector",
      "tags" : [
        "env-type: pt",
        "ns-category: sprx"
      ]
    }
  },
  {
    "environment" : {
      "name" : "sprx-prod",
      "description" : "Harness environment prod.",
      "type" : "Production",
      "connector_name" : "prod-specialty-sprx-connector",
      "tags" : [
        "env-type: prod",
        "ns-category: sprx"
      ]
    }
  },
  {
    "environment" : {
      "name" : "sprx-dr",
      "description" : "Harness environment dr.",
      "type" : "Production",
      "connector_name" : "dr-specialty-sprx-connector",
      "tags" : [
        "env-type: dr",
        "ns-category: sprx"
      ]
    }
  }
]

prometheus_list = []

k8s_connector_list = [
  {
    "k8s_connector" : {
      "name" : "specialty-sprx-gke-connector",
      "description" : "Kubernetes connector for specialty-sprx-gke cluster",
      "delegate_selectors" : [
        "specialty-sprx-gke-ng-delegate"
      ],
      "tags" : [
        "cluster: specialty-sprx-gke"
      ]
    }
  },
  {
    "k8s_connector" : {
      "name" : "gke-specialty-sprx-connector",
      "description" : "Kubernetes connector for gke-specialty-sprx cluster",
      "delegate_selectors" : [
        "gke-specialty-sprx-ng-delegate"
      ],
      "tags" : [
        "cluster: gke-specialty-sprx"
      ]
    }
  },
  {
    "k8s_connector" : {
      "name" : "pt-specialty-sprx-connector",
      "description" : "Kubernetes connector for gke-specialty-sprx cluster",
      "delegate_selectors" : [
        "pt-specialty-sprx-ng-delegate"
      ],
      "tags" : [
        "cluster: pt-specialty-sprx"
      ]
    }
  },
  {
    "k8s_connector" : {
      "name" : "dr-specialty-sprx-connector",
      "description" : "Kubernetes connector for dr-specialty-sprx cluster",
      "delegate_selectors" : [
        "dr-specialty-sprx-ng-delegate"
      ],
      "tags" : [
        "cluster: dr-specialty-sprx"
      ]
    }
  },
  {
    "k8s_connector" : {
      "name" : "prod-specialty-sprx-connector",
      "description" : "Kubernetes connector for prod-specialty-sprx cluster",
      "delegate_selectors" : [
        "prod-specialty-sprx-ng-delegate"
      ],
      "tags" : [
        "cluster: prod-specialty-sprx"
      ]
    }
  }
]




import com.bertramlabs.plugins.hcl4j.HCLParser;
import com.bertramlabs.plugins.hcl4j.HCLWriter;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class TfvarsService {

    private static final String FILE_PATH = "path/to/your/file.tfvars"; // Update this with the actual path

    public void addNewEnvironment() {
        try {
            // Step 1: Parse the .tfvars file
            HCLParser parser = new HCLParser();
            Map<String, Object> tfvarsData = parser.parse(new File(FILE_PATH));

            // Step 2: Get the environment_list and add a new environment
            List<Map<String, Object>> environmentList = (List<Map<String, Object>>) tfvarsData.get("environment_list");

            // Create a new environment
            Map<String, Object> newEnvironment = new HashMap<>();
            newEnvironment.put("name", "new-env");
            newEnvironment.put("description", "Description for new environment");
            newEnvironment.put("type", "PreProduction");
            newEnvironment.put("connector_name", "new-env-connector");
            List<String> tags = List.of("env-type: new", "ns-category: sprx");
            newEnvironment.put("tags", tags);

            // Add to environment_list
            Map<String, Object> newEnvMap = new HashMap<>();
            newEnvMap.put("environment", newEnvironment);
            environmentList.add(newEnvMap);

            // Step 3: Write the modified content back to the file
            writeTfvarsFile(tfvarsData);

        } catch (Exception e) {
            System.err.println("Error processing .tfvars file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void writeTfvarsFile(Map<String, Object> tfvarsData) throws IOException {
        HCLWriter writer = new HCLWriter();
        try (FileWriter fileWriter = new FileWriter(FILE_PATH)) {
            fileWriter.write(writer.toString(tfvarsData));
        }
    }
}


 private void writeTfvarsAsJson(Map<String, Object> tfvarsData) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);  // Pretty-print JSON
        objectMapper.writeValue(new File(JSON_FILE_PATH), tfvarsData);  // Write JSON to specified file
    }



import java.io.*;
import java.nio.file.*;
import java.util.List;
import java.util.ArrayList;

public class TfvarsFileModifier {

    public static void main(String[] args) {
        String filePath = "path/to/your/file.tfvars"; // Specify your .tfvars file path

        // Define the new environment to add
        String newEnvironment = "  {\n" +
                                "    \"environment\" : {\n" +
                                "      \"name\" : \"sprx-dev1\",\n" +
                                "      \"description\" : \"Harness environment dev1.\",\n" +
                                "      \"type\" : \"PreProduction\",\n" +
                                "      \"connector_name\" : \"specialty-sprx-gke-connector\",\n" +
                                "      \"tags\" : [\n" +
                                "        \"env-type: dev\",\n" +
                                "        \"ns-category: sprx\"\n" +
                                "      ]\n" +
                                "    }\n" +
                                "  }";

        try {
            // Read all lines from the file
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            List<String> modifiedLines = new ArrayList<>();
            boolean environmentListFound = false;

            for (String line : lines) {
                modifiedLines.add(line);

                // Check if we are at the end of the environment_list array
                if (line.trim().equals("]") && environmentListFound) {
                    // Insert a comma before the new environment if there are already other entries
                    int lastEntryIndex = modifiedLines.size() - 2;
                    if (modifiedLines.get(lastEntryIndex).trim().endsWith("}")) {
                        modifiedLines.set(lastEntryIndex, modifiedLines.get(lastEntryIndex) + ",");
                    }

                    // Add the new environment entry before the closing bracket
                    modifiedLines.add(newEnvironment);
                    modifiedLines.add("]");
                    break;
                }

                // Detect the start of the environment_list array
                if (line.trim().startsWith("environment_list = [")) {
                    environmentListFound = true;
                }
            }

            // Write the modified lines back to the file
            Files.write(Paths.get(filePath), modifiedLines);
            System.out.println("New environment added successfully.");

        } catch (IOException e) {
            System.err.println("Error while reading or writing the .tfvars file: " + e.getMessage());
        }
    }
}

