<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.eclipse.jgit</groupId>
        <artifactId>org.eclipse.jgit</artifactId>
        <version>5.13.0.202109080827-r</version>
    </dependency>
</dependencies>


import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

@Service
public class GitService {

    @Value("${github.username}")
    private String githubUsername;

    @Value("${github.token}")
    private String githubToken;

    public void cloneRepoAndCommit(String repoUrl, String branch, String filePath, String fileContent) throws GitAPIException, IOException {
        // Temporary directory for cloning
        File localRepoDir = Files.createTempDirectory("temp-repo").toFile();

        try (Git git = Git.cloneRepository()
                .setURI(repoUrl)
                .setBranch(branch)
                .setDirectory(localRepoDir)
                .call()) {

            // Modify or add file
            Path file = localRepoDir.toPath().resolve(filePath);
            Files.writeString(file, fileContent);

            // Add, commit, and push changes
            git.add().addFilepattern(filePath).call();
            git.commit().setMessage("Add or update file " + filePath).call();
            git.push()
               .setCredentialsProvider(new UsernamePasswordCredentialsProvider(githubUsername, githubToken))
               .call();
        } finally {
            // Clean up temporary directory
            deleteDirectory(localRepoDir);
        }
    }

    private void deleteDirectory(File directory) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File f : files) {
                deleteDirectory(f);
            }
        }
        directory.delete();
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/api/git")
public class GitController {

    @Autowired
    private GitService gitService;

    @PostMapping("/commit")
    public String commitToRepo(@RequestParam String repoUrl, 
                               @RequestParam String branch,
                               @RequestParam String filePath, 
                               @RequestParam String content) {
        try {
            gitService.cloneRepoAndCommit(repoUrl, branch, filePath, content);
            return "Commit successful!";
        } catch (Exception e) {
            e.printStackTrace();
            return "Error committing to the repository: " + e.getMessage();
        }
    }
}


public class GitCloneTest {
    public static void main(String[] args) {
        try (Git git = Git.cloneRepository()
                .setURI("https://github.com/username/repo.git")
                .setDirectory(new File("/path/to/clone"))
                .setCredentialsProvider(new UsernamePasswordCredentialsProvider("", "your-github-token"))
                .call()) {
            System.out.println("Repository cloned successfully");
        } catch (GitAPIException e) {
            e.printStackTrace();
        }
    }
}



// gitService.js
const simpleGit = require('simple-git');
const fs = require('fs').promises;
const rimraf = require('rimraf'); // For cleanup
require('dotenv').config();

const git = simpleGit();

async function cloneRepoAndCommit(repoUrl, branch, filePath, fileContent) {
    const localDir = './temp-repo';

    try {
        // Clone the repository
        await git.clone(repoUrl, localDir, ['-b', branch]);

        // Change the working directory to the cloned repository
        const repo = simpleGit(localDir);

        // Write content to the specified file
        await fs.writeFile(`${localDir}/${filePath}`, fileContent);

        // Stage, commit, and push changes
        await repo.add(filePath);
        await repo.commit('Add or update file via Node.js script');
        await repo.push(['-u', 'origin', branch], {
            '-o': `https://${process.env.GITHUB_TOKEN}@${repoUrl.split('https://')[1]}`,
        });

        console.log('Commit successful!');
    } catch (error) {
        console.error('Error committing to the repository:', error.message);
    } finally {
        // Clean up the cloned repository
        rimraf.sync(localDir); // Delete the cloned directory after commit
    }
}

module.exports = cloneRepoAndCommit;



// index.js
const cloneRepoAndCommit = require('./gitService');

const repoUrl = 'https://github.com/your-username/your-repo.git';
const branch = 'main';
const filePath = 'src/main/resources/test.txt';
const fileContent = 'Hello, this is a test commit from Node.js!';

cloneRepoAndCommit(repoUrl, branch, filePath, fileContent);



import org.kohsuke.github.*;

@Service
public class GitHubService {

    private final GitHub github;
    private final String repositoryName = "username/repo-name"; // replace with your repo

    public GitHubService(@Value("${github.token}") String token) throws IOException {
        this.github = new GitHubBuilder().withOAuthToken(token).build();
    }

    public void commitFile(String filePath, String content, String commitMessage) throws IOException {
        GHRepository repo = github.getRepository(repositoryName);
        GHContent contentFile;

        try {
            contentFile = repo.getFileContent(filePath);
            contentFile.update(content, commitMessage);
        } catch (GHFileNotFoundException e) {
            repo.createContent(content, commitMessage, filePath);
        }
    }
}

