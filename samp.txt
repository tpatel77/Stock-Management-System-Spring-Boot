<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.eclipse.jgit</groupId>
        <artifactId>org.eclipse.jgit</artifactId>
        <version>5.13.0.202109080827-r</version>
    </dependency>
</dependencies>


import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

@Service
public class GitService {

    @Value("${github.username}")
    private String githubUsername;

    @Value("${github.token}")
    private String githubToken;

    public void cloneRepoAndCommit(String repoUrl, String branch, String filePath, String fileContent) throws GitAPIException, IOException {
        // Temporary directory for cloning
        File localRepoDir = Files.createTempDirectory("temp-repo").toFile();

        try (Git git = Git.cloneRepository()
                .setURI(repoUrl)
                .setBranch(branch)
                .setDirectory(localRepoDir)
                .call()) {

            // Modify or add file
            Path file = localRepoDir.toPath().resolve(filePath);
            Files.writeString(file, fileContent);

            // Add, commit, and push changes
            git.add().addFilepattern(filePath).call();
            git.commit().setMessage("Add or update file " + filePath).call();
            git.push()
               .setCredentialsProvider(new UsernamePasswordCredentialsProvider(githubUsername, githubToken))
               .call();
        } finally {
            // Clean up temporary directory
            deleteDirectory(localRepoDir);
        }
    }

    private void deleteDirectory(File directory) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File f : files) {
                deleteDirectory(f);
            }
        }
        directory.delete();
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/api/git")
public class GitController {

    @Autowired
    private GitService gitService;

    @PostMapping("/commit")
    public String commitToRepo(@RequestParam String repoUrl, 
                               @RequestParam String branch,
                               @RequestParam String filePath, 
                               @RequestParam String content) {
        try {
            gitService.cloneRepoAndCommit(repoUrl, branch, filePath, content);
            return "Commit successful!";
        } catch (Exception e) {
            e.printStackTrace();
            return "Error committing to the repository: " + e.getMessage();
        }
    }
}
